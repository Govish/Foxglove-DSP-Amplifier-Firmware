#include <splash_screen.h>

//============================== STATIC MEMBER INITIALIZATION ==============================

const std::array<uint8_t, Splash_Screen::splash_image_width * Splash_Screen::splash_image_height> 
U8X8_PROGMEM Splash_Screen::splash_image = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x80, 0x7F, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFC, 0xFF, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x78, 0x3C, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x38, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x3C, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xF8, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x70, 0x1E, 0x00, 0x3E, 0x70, 0x70, 0xE0, 0x39, 
    0x3C, 0xE0, 0x03, 0x0F, 0x06, 0xF8, 0x00, 0x00, 0x00, 0x1E, 0x80, 0xFF, 
    0xF0, 0x70, 0xF8, 0x3F, 0x1C, 0xF8, 0x0F, 0x0F, 0x0F, 0xFE, 0x01, 0x00, 
    0x00, 0xFE, 0xC3, 0xE3, 0xF1, 0x71, 0x7C, 0x3E, 0x1C, 0x3C, 0x0E, 0x0F, 
    0x0F, 0xCF, 0x03, 0x00, 0x00, 0xFE, 0xC3, 0xE1, 0xE1, 0x31, 0x3C, 0x3C, 
    0x1E, 0x1E, 0x1E, 0x0F, 0x8F, 0xC7, 0x03, 0x00, 0x00, 0x1E, 0xE0, 0xC1, 
    0xE1, 0x39, 0x1E, 0x1C, 0x1E, 0x1E, 0x1F, 0x0F, 0x8F, 0xC3, 0x01, 0x00, 
    0x00, 0x0F, 0xE0, 0xC1, 0xC1, 0x0F, 0x1E, 0x1E, 0x1E, 0x0F, 0x1F, 0x07, 
    0xC6, 0xE3, 0x01, 0x00, 0x00, 0x0F, 0xF0, 0xE0, 0xC1, 0x07, 0x0E, 0x1E, 
    0x1E, 0x0F, 0x9F, 0x07, 0xCE, 0x7B, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0xE0, 
    0xC1, 0x03, 0x0F, 0x1E, 0x0E, 0x0F, 0xFF, 0x07, 0xFE, 0x1F, 0x00, 0x00, 
    0x00, 0x0F, 0xF0, 0xE0, 0xE1, 0x07, 0x0F, 0x1F, 0x0F, 0x0F, 0x1E, 0x07, 
    0xE6, 0x03, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0xE0, 0xF1, 0x07, 0x0F, 0x0F, 
    0x0F, 0x0F, 0x0F, 0x07, 0xC3, 0x03, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0xF0, 
    0xB8, 0x07, 0x8F, 0xCF, 0x8F, 0x0F, 0x0F, 0x0F, 0xC3, 0x07, 0x04, 0x00, 
    0x00, 0x07, 0xE0, 0xF0, 0x1C, 0x9F, 0xDF, 0xEF, 0xDF, 0x8F, 0x07, 0xDF, 
    0x81, 0x0F, 0x07, 0x00, 0x00, 0x07, 0xE0, 0x7D, 0x1C, 0xFF, 0xFE, 0x3F, 
    0xFE, 0xDE, 0x03, 0xFF, 0x80, 0xFF, 0x03, 0x00, 0x00, 0x07, 0xC0, 0x1F, 
    0x1C, 0x7E, 0x7C, 0x0F, 0x3E, 0xFC, 0x01, 0x7E, 0x00, 0xFE, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x0F, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x07, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xB8, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x9C, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x8E, 0xF7, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0xF0, 0xFF, 
    0xFF, 0xFF, 0xC6, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 
    0x00, 0x00, 0xF0, 0xF0, 0x30, 0x78, 0xC2, 0xFB, 0x79, 0xCE, 0xE0, 0xBE, 
    0x83, 0x0C, 0x86, 0x1F, 0x00, 0x00, 0xF0, 0x6C, 0xBE, 0x7B, 0xE2, 0xFD, 
    0x70, 0xC4, 0x4C, 0xBE, 0xF9, 0xCC, 0x37, 0x1F, 0x00, 0x00, 0xF8, 0xCE, 
    0xBC, 0xFB, 0xFE, 0xFE, 0x76, 0xC4, 0x4C, 0xBE, 0xF9, 0x0C, 0x27, 0x1F, 
    0x00, 0x00, 0xF8, 0xCE, 0x33, 0xFC, 0x7E, 0x7F, 0x30, 0x91, 0x60, 0xBE, 
    0xE1, 0x0C, 0x87, 0x1F, 0x00, 0x00, 0xF8, 0xEC, 0x37, 0xFF, 0x81, 0x7F, 
    0x20, 0x91, 0x7C, 0xBE, 0xF9, 0xCC, 0x37, 0x1F, 0x00, 0x00, 0xF0, 0x70, 
    0xB0, 0xFF, 0xFF, 0x7F, 0x2F, 0x9F, 0xFC, 0xB0, 0xF9, 0x0C, 0x76, 0x1F, 
    0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x80, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00
};

//================================= PUBLIC MEMBER FUNCTIONS ===============================

//initialization of instances in constructor
Splash_Screen::Splash_Screen(UI_Page* _next_page):
    dwell_screen(dwell_dark_ms, _next_page), //initialize the dark page after animation completes
    to_next_page(&dwell_screen), //transition to the blank dwell screen after animation is done
    splash_sched() //initialize the scheduler
{}

Splash_Screen::Splash_Screen():
    //run the normal constructor but with a nullptr as the next page
    Splash_Screen(nullptr)
{}

//we'll really navigate to our next page after the dwell screen
void Splash_Screen::set_next_page(UI_Page* _next_page) {
    dwell_screen.set_next_page(_next_page);
}

//update splash screen timings from values passed into function
void Splash_Screen::configure_timing(uint32_t _led_anim_ms, uint32_t _dwell_im_ms, uint32_t _dwell_dark_ms) {
    led_anim_ms = _led_anim_ms;
    dwell_im_ms = _dwell_im_ms;
    dwell_dark_ms = _dwell_dark_ms;
}

//on entry, draw the splash screen, start the timing for the LED animations
void Splash_Screen::impl_on_entry() {
    //run the LED animation at our specified frequency
    splash_sched.schedule_interval_ms(Context_Callback_Function<void>(reinterpret_cast<void*>(this), animate_LEDs_cb), led_anim_ms);

    //and set our desired dark screen dwell time
    dwell_screen.set_dwell_time(dwell_dark_ms);
}

//on exit, clear all the LEDs
void Splash_Screen::impl_on_exit() {
    clear_LEDs();
}

//draw the splash screen when this function is invoked
void Splash_Screen::draw() {
    //center the splash image on the screen; compute these offsets once
    static const uint32_t x_loc = (graphics_handle.getWidth() - splash_image_width) >> 1;
    static const uint32_t y_loc = (graphics_handle.getHeight() - splash_image_height) >> 1;

    //canonical `clearBuffer --> stuff --> sendBuffer` routine with graphics
    graphics_handle.clearBuffer();
    graphics_handle.drawXBMP(x_loc, y_loc, splash_image_width, splash_image_height, splash_image.data());
    graphics_handle.sendBuffer();
}

//=================================== PRIVATE FUNCTION DEFS =================================

//animate the LEDs during the splash screen
//and once animation is done, keep the image on the screen and LEDs lit for a little bit
void Splash_Screen::animate_LEDs() {
    static size_t anim_counter = 0; //counter for the animation sequence; number of animation steps set by number of LED and colors of animation

    //run the LED animation
    if(anim_counter < (leds.size() * App_Constants::SPLASH_LED_COLORS.size())) {
        //grab the LED and the color we should set it to
        RGB_LED* led = leds[anim_counter % App_Constants::NUM_RGB_LEDs]; //cycle through each LED
        RGB_LED::COLOR color = App_Constants::SPLASH_LED_COLORS[anim_counter / App_Constants::NUM_RGB_LEDs]; //leveraging integer divide 
        
        //and actually write that color to the LED
        led->set_color(color);

        //advance the animation step
        anim_counter++;
    }

    //animation complete, so hold this image, and schedule the transition to the blank screen after a little bit
    else {
        //reusing the animation scheduler, has a byproduct of stopping the animation
        splash_sched.schedule_oneshot_ms(to_next_page, dwell_im_ms);
    }

}

//clear all the LEDs when splash screen completes
//do this by turning off all LEDs
void Splash_Screen::clear_LEDs() {
    for(RGB_LED* led : leds)
        led->set_color(RGB_LED::OFF);
}
